#!/usr/bin/env python3
# build_82a_backup - Create corrupted TI-82 Advanced backup for native code execution
# 01/03/2016
# Brandon Wilson
#
# I despise software licenses, and I despise thinking about them.
# If you really insist that this have one before you use it for your own
#   purposes, then consider it WTFPL'd before asking me.
# I really do not care what you do with this, if anything, nor will I ever.
from tisndrcv import *

# Open the backup file
print("Opening backup file...")
file = TIBackupFile(TIVariableFile("82A_base.82B"))

# Get references to REAL variables X and Y, and program Z
print("Getting references to prgmZ and REAL variables X and Y...")
x = next(x for x in file.var_entries if x.name_as_string == b'X')
y = next(x for x in file.var_entries if x.name_as_string == b'Y')
z = next(x for x in file.var_entries if x.name_as_string == b'Z')

# Embed our prgmZ data into the backup
print("Embedding z.8xp's data into prgmZ...")
newz = TIVariableFile("z.8xp")
z.data = newz.data[17:] # skips more 8x* junk

# Ensure that REAL variable Y and prgmZ are first in user memory
# This will put REAL variable Y at 0x9D95 (userMem) and prgmZ at 0x9D9E (size word + data)
print("Moving REAL variable Y and prgmZ to start of user memory...")
file.vars_first_in_mem.insert(0, z)
file.vars_first_in_mem.insert(0, y)

# Set REAL variable X's data so that the second word points to 0x9DA0
# (0x9D95 (userMem) + 9 bytes (REAL variable X's data) + 2 bytes (prgmZ's size bytes)
# cxMain will be set to this address and prgmZ will get control.
print("Changing REAL variable X's data...")
x.data = [0xA0, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

# Set REAL variable Y's VAT pointer so the data appears to be at cxMain (the copy destination for above data)
print("Setting REAL variable Y's data address to cxMain...")
y.address = 0x858D
# Tell tisndrcv not to mess with this VAT pointer's address when building the backup image
y.leave_address_alone = True

# Save the backup file
# On the homescreen, [x,t,theta,n], [STO->], [ALPHA], [Y], [ENTER] and pressing a key will trigger the exploit
print("Saving backup file...")
file.save("82A_exploit.82B")

print("Done.")
